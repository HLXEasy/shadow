name: Featurebranch
on:
  push:
    branches-ignore:
      - 'master'
      - 'develop'
      - '*android*'

jobs:
  # ==========================================================================
  # Create Github tag/release and export short SHA of current HEAD
  prepareRelease:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.url }}
      github_sha_short: ${{ steps.slug.outputs.sha8 }}
      alias_release: ${{ steps.determine_release.outputs.alias_release }}
    steps:
      - uses: actions/checkout@v1
      - name: Get short SHA
        id: slug
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d %H:%M:%S')"
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      - name: Set Alias release/tag name
        id: determine_release
        run: |
          if [[ ${{ steps.extract_branch.outputs.branch }} = master ]] ; then
              majorVersion=$(grep CLIENT_VERSION_MAJOR ${{ github.workspace }}/CMakeLists.txt | head -n1 | cut -d ' ' -f2 | sed 's/)//g' | tr -d '\\n' | tr -d '\\r' | sed 's/ //g')
              minorVersion=$(grep CLIENT_VERSION_MINOR ${{ github.workspace }}/CMakeLists.txt | head -n1 | cut -d ' ' -f2 | sed 's/)//g' | tr -d '\\n' | tr -d '\\r' | sed 's/ //g')
              bugfixVersion=$(grep CLIENT_VERSION_REVISION ${{ github.workspace }}/CMakeLists.txt | head -n1 | cut -d ' ' -f2 | sed 's/)//g' | tr -d '\\n' | tr -d '\\r' | sed 's/ //g')
              echo "::set-output name=alias_release::$(printf '%s.%s.%s' $majorVersion $minorVersion $bugfixVersion)"
          else
              echo "::set-output name=alias_release::gh-actions${{ github.run_number }}"
          fi

      # First create the plain release, so the upload URL could be exported
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.determine_release.outputs.alias_release }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ==========================================================================
  # Build Ubuntu 20.04 version, which is also base for Alias Docker image
  # This steps is followed by the Docker image build
  buildLinuxBinariesAlsoForDockerImage:
    runs-on: ubuntu-latest
    needs: prepareRelease
    outputs:
      github_sha_short: ${{ needs.prepareRelease.outputs.github_sha_short }}
      alias_release: ${{ needs.prepareRelease.outputs.alias_release }}
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Build docker image
        run: >
          docker build
          -t local
          -f Docker/Ubuntu/Dockerfile_20_04
          --build-arg BUILD_THREADS=2
          --build-arg GITHUB_CI_TOKEN=${{ secrets.GITHUB_TOKEN }}
          --build-arg GIT_COMMIT=${{ needs.prepareRelease.outputs.github_sha_short }}
          --build-arg ALIAS_RELEASE=${{ needs.prepareRelease.outputs.alias_release }}
          --build-arg REPLACE_EXISTING_ARCHIVE=--replace
          .
        env:
          GITHUB_CI_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ==========================================================================
  # Build Alias Docker image
  # Based on the content of https://github.com/aliascash/docker-aliaswalletd
  buildDockerImage:
    runs-on: ubuntu-latest
    needs: buildLinuxBinariesAlsoForDockerImage
    steps:
      # Get installer repo content
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
          repository: aliascash/docker-aliaswalletd

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} #use username, not email
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: aliascash/docker-aliaswalletd:${{ needs.buildLinuxBinariesAlsoForDockerImage.outputs.alias_release }}
          build-args: |
            DOWNLOAD_URL=https://github.com/aliascash/alias-wallet/releases/download/${{ needs.buildLinuxBinariesAlsoForDockerImage.outputs.alias_release }}/Alias-${{ needs.buildLinuxBinariesAlsoForDockerImage.outputs.alias_release }}-${{ needs.buildLinuxBinariesAlsoForDockerImage.outputs.github_sha_short }}-Ubuntu-20-04.tgz
          #arg2=value2

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
