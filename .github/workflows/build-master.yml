name: Master
on:
  push:
    branches:
      - master

jobs:
  # ==========================================================================
  # Create Github tag/release and export short SHA of current HEAD
  prepareRelease:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.url }}
      github_sha_short: ${{ steps.slug.outputs.sha8 }}
      alias_release: ${{ steps.determine_release.outputs.alias_release }}
    steps:
      - uses: actions/checkout@v1
      - name: Get short SHA
        id: slug
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"
      - name: Set Alias release/tag name
        id: determine_release
        run: |
          majorVersion=$(grep CLIENT_VERSION_MAJOR ${{ github.workspace }}/CMakeLists.txt | head -n1 | cut -d ' ' -f2 | sed 's/)//g' | tr -d '\\n' | tr -d '\\r' | sed 's/ //g')
          minorVersion=$(grep CLIENT_VERSION_MINOR ${{ github.workspace }}/CMakeLists.txt | head -n1 | cut -d ' ' -f2 | sed 's/)//g' | tr -d '\\n' | tr -d '\\r' | sed 's/ //g')
          bugfixVersion=$(grep CLIENT_VERSION_REVISION ${{ github.workspace }}/CMakeLists.txt | head -n1 | cut -d ' ' -f2 | sed 's/)//g' | tr -d '\\n' | tr -d '\\r' | sed 's/ //g')
          echo "::set-output name=alias_release::$(printf '%s.%s.%s' $majorVersion $minorVersion $bugfixVersion)"

      # First create the plain release, so the upload URL could be exported
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.determine_release.outputs.alias_release }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Releasenotes from master
        id: create_release_master
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.determine_release.outputs.alias_release }}
          name: "Release ${{ steps.determine_release.outputs.alias_release }} (Build #${{ github.run_number }})"
          body_path: ${{ github.workspace }}/ReleaseNotes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ==========================================================================
  # Build all x86 Linux flavours except Ubuntu 20.04. See next step.
  buildLinux:
    runs-on: ubuntu-latest
    needs: prepareRelease
    strategy:
      matrix:
        distro: [ CentOS/Dockerfile, Debian/Dockerfile_Buster, Debian/Dockerfile_Stretch, Fedora/Dockerfile, OpenSUSE/Dockerfile, Ubuntu/Dockerfile_18_04 ]
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Build binaries
        run: >
          docker build
          -t local
          -f Docker/${{ matrix.distro }}
          --build-arg BUILD_THREADS=2
          --build-arg GITHUB_CI_TOKEN=${{ secrets.GITHUB_TOKEN }}
          --build-arg GIT_COMMIT=${{ needs.prepareRelease.outputs.github_sha_short }}
          --build-arg ALIAS_RELEASE=${{ needs.prepareRelease.outputs.alias_release }}
          --build-arg REPLACE_EXISTING_ARCHIVE=--replace
          .
        env:
          GITHUB_CI_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ==========================================================================
  # Build Ubuntu 20.04 version, which is also base for Alias Docker image
  # This steps is followed by the Docker image build
  buildLinuxBinariesAlsoForDockerImage:
    runs-on: ubuntu-latest
    needs: prepareRelease
    outputs:
      github_sha_short: ${{ needs.prepareRelease.outputs.github_sha_short }}
      alias_release: ${{ needs.prepareRelease.outputs.alias_release }}
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Build binaries
        run: >
          docker build
          -t local
          -f Docker/Ubuntu/Dockerfile_20_04
          --build-arg BUILD_THREADS=2
          --build-arg GITHUB_CI_TOKEN=${{ secrets.GITHUB_TOKEN }}
          --build-arg GIT_COMMIT=${{ needs.prepareRelease.outputs.github_sha_short }}
          --build-arg ALIAS_RELEASE=${{ needs.prepareRelease.outputs.alias_release }}
          --build-arg REPLACE_EXISTING_ARCHIVE=--replace
          .
        env:
          GITHUB_CI_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ==========================================================================
  # Build aarch64 version (Raspberry PI ARMv8)
  buildARM:
    runs-on: ubuntu-latest
    needs: prepareRelease
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: arm64
      - name: Build binaries
        run: >
          docker build
          -t local
          -f Docker/RaspberryPi/Dockerfile_Buster
          --build-arg BUILD_THREADS=2
          --build-arg GITHUB_CI_TOKEN=${{ secrets.GITHUB_TOKEN }}
          --build-arg GIT_COMMIT=${{ needs.prepareRelease.outputs.github_sha_short }}
          --build-arg ALIAS_RELEASE=${{ needs.prepareRelease.outputs.alias_release }}
          --build-arg REPLACE_EXISTING_ARCHIVE=--replace
          .
        env:
          GITHUB_CI_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ==========================================================================
  # Build MacOS version
  buildMacOS:
    runs-on: macos-11
    needs: prepareRelease
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '12.5.1'

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.12.10'
          modules: 'qtwebengine'

      - name: Install dependencies
        run: |
          brew uninstall --ignore-dependencies berkeley-db
          brew install berkeley-db@4 boost openssl

      - name: Cache build dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-build-dependencies-mac-v3
        with:
          path: |
            ${{ github.workspace }}/cmake-build-cmdline-mac/*
            !${{ github.workspace }}/cmake-build-cmdline-mac/aliaswallet
            ~/Archives/Tor/Tor.libraries.MacOS.zip
          key: ${{ runner.os }}-${{ env.cache-name }}

      - name: Build MacOS binaries
        run: ./scripts/cmake-build-mac.sh -g
        env:
          MAC_QT_DIR: ${{ env.Qt5_DIR }}

      - name: Create MacOS dmg sha256 checksum file
        run: |
          shasum -a 256 ${{ github.workspace }}/cmake-build-cmdline-mac/aliaswallet/Alias.dmg | awk '{ print $1 }' > ${{ github.workspace }}/cmake-build-cmdline-mac/aliaswallet/Alias.sha256
          cat ${{ github.workspace }}/cmake-build-cmdline-mac/aliaswallet/Alias.sha256

      - name: Upload MacOS Build
        id: upload-release-asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/cmake-build-cmdline-mac/aliaswallet/Alias.dmg
          asset_name: Alias-${{ needs.prepareRelease.outputs.alias_release }}-${{ needs.prepareRelease.outputs.github_sha_short }}-Mac.dmg
          tag: ${{ needs.prepareRelease.outputs.alias_release }}
          overwrite: true

      - name: Upload MacOS checksum file
        id: upload-release-checksum
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/cmake-build-cmdline-mac/aliaswallet/Alias.sha256
          asset_name: Alias-${{ needs.prepareRelease.outputs.alias_release }}-${{ needs.prepareRelease.outputs.github_sha_short }}-Mac.sha256
          tag: ${{ needs.prepareRelease.outputs.alias_release }}
          overwrite: true

  # ==========================================================================
  # Build Windows x64 version
  buildWindows:
    runs-on: windows-latest
    needs: prepareRelease
    outputs:
      upload_url: ${{ needs.prepareRelease.outputs.upload_url }}
      github_sha_short: ${{ needs.prepareRelease.outputs.github_sha_short }}
      alias_release: ${{ needs.prepareRelease.outputs.alias_release }}
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.12.9'
          setup-python: 'false'
          modules: 'qtwebengine'

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v7
        with:
          vcpkgArguments: berkeleydb:x64-windows boost:x64-windows leveldb:x64-windows openssl:x64-windows
          vcpkgTriplet: x64-windows
          vcpkgDirectory: 'C:\vcpkg'
          vcpkgGitCommitId: aa028e94d733b03852ea441b2474468f43d94c5b

      - name: Build Windows binaries
        run: ./scripts/cmake-build-win.bat
        env:
          VCPKG_DEFAULT_TRIPLET: x64-windows
          QTDIR: ${{ env.Qt5_Dir }}
          VSDIR: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise'
          CMAKEDIR: 'C:\Program Files\CMake\bin'
          VCPKGDIR: 'C:\vcpkg'

      - name: Create zip archive and sha256 checksum
        run: |
          powershell Compress-Archive build/delivery/Alias Alias.zip
          powershell "(Get-FileHash Alias.zip).Hash > Alias.sha256"
          powershell "(Get-Content Alias.sha256) | Out-File Alias.sha256 -Encoding ascii"
          type Alias.sha256

      - name: Upload Windows Build
        id: upload-release-asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/Alias.zip
          asset_name: Alias-${{ needs.prepareRelease.outputs.alias_release }}-${{ needs.prepareRelease.outputs.github_sha_short }}-Win64.zip
          tag: ${{ needs.prepareRelease.outputs.alias_release }}
          overwrite: true

      - name: Upload Windows checksum file
        id: upload-release-checksum
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/Alias.sha256
          asset_name: Alias-${{ needs.prepareRelease.outputs.alias_release }}-${{ needs.prepareRelease.outputs.github_sha_short }}-Win64.sha256
          tag: ${{ needs.prepareRelease.outputs.alias_release }}
          overwrite: true

  # ==========================================================================
  # Build Windows x86 version
  buildWindowsX86:
    runs-on: windows-latest
    needs: prepareRelease
    outputs:
      upload_url: ${{ needs.prepareRelease.outputs.upload_url }}
      github_sha_short: ${{ needs.prepareRelease.outputs.github_sha_short }}
      alias_release: ${{ needs.prepareRelease.outputs.alias_release }}
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.12.9'
          setup-python: 'false'
          modules: 'qtwebengine'
          arch: 'win32_msvc2017'

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v7
        with:
          vcpkgArguments: berkeleydb:x86-windows boost:x86-windows leveldb:x86-windows openssl:x86-windows
          vcpkgTriplet: x86-windows
          vcpkgDirectory: 'C:\vcpkg'
          vcpkgGitCommitId: aa028e94d733b03852ea441b2474468f43d94c5b

      - name: Build Windows binaries
        run: ./scripts/cmake-build-win-x86.bat
        env:
          VCPKG_DEFAULT_TRIPLET: x86-windows
          QTDIR_x86: ${{ env.Qt5_Dir }}
          VSDIR: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise'
          CMAKEDIR_x86: 'C:\Program Files\CMake\bin'
          VCPKGDIR: 'C:\vcpkg'

      - name: Create zip archive and sha256 checksum
        run: |
          powershell Compress-Archive build-x86/delivery/Alias Alias.zip
          powershell "(Get-FileHash Alias.zip).Hash > Alias.sha256"
          powershell "(Get-Content Alias.sha256) | Out-File Alias.sha256 -Encoding ascii"
          type Alias.sha256

      - name: Upload Windows Build
        id: upload-release-asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/Alias.zip
          asset_name: Alias-${{ needs.prepareRelease.outputs.alias_release }}-${{ needs.prepareRelease.outputs.github_sha_short }}-Win32.zip
          tag: ${{ needs.prepareRelease.outputs.alias_release }}
          overwrite: true

      - name: Upload Windows checksum file
        id: upload-release-checksum
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/Alias.sha256
          asset_name: Alias-${{ needs.prepareRelease.outputs.alias_release }}-${{ needs.prepareRelease.outputs.github_sha_short }}-Win32.sha256
          tag: ${{ needs.prepareRelease.outputs.alias_release }}
          overwrite: true

  # ==========================================================================
  # Create Windows x64 installer
  # Based on the content of https://github.com/aliascash/installer
  createWindowsInstaller:
    runs-on: windows-latest
    needs: buildWindows
    steps:
      # Get installer repo content
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
          repository: aliascash/installer

      # Download installable content...
      - name: Download content to install
        uses: carlosperate/download-file-action@v1.0.3
        with:
          file-url: https://github.com/aliascash/alias-wallet/releases/download/${{ needs.buildWindows.outputs.alias_release }}/Alias-${{ needs.buildWindows.outputs.alias_release }}-${{ needs.buildWindows.outputs.github_sha_short }}-Win64.zip
          file-name: Alias.zip
          location: ${{ github.workspace }}

      # ... and extract it
      - name: Extract content to install
        run: 7z x -o"${{ github.workspace }}/windows/content" "${{ github.workspace }}/Alias.zip"

      # Create installer
      - name: Create Windows installer
        run: |
          cd ${{ github.workspace }}/windows/
          iscc.exe Alias.iss

      - name: Create installer checksum file
        run: |
          powershell "(Get-FileHash ${{ github.workspace }}/windows/Output/Alias-Installer.exe).Hash > ${{ github.workspace }}/windows/Output/Alias-Installer.sha256"
          powershell "(Get-Content ${{ github.workspace }}/windows/Output/Alias-Installer.sha256) | Out-File ${{ github.workspace }}/windows/Output/Alias-Installer.sha256 -Encoding ascii"
          type ${{ github.workspace }}/windows/Output/Alias-Installer.sha256

      # Upload the installer to Github
      - name: Upload installer
        id: upload-release-asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/windows/Output/Alias-Installer.exe
          asset_name: Alias-${{ needs.buildWindows.outputs.alias_release }}-${{ needs.buildWindows.outputs.github_sha_short }}-Win64-Installer.exe
          tag: ${{ needs.buildWindows.outputs.alias_release }}
          overwrite: true

      - name: Upload installer checksum
        id: upload-release-checksum
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/windows/Output/Alias-Installer.sha256
          asset_name: Alias-${{ needs.buildWindows.outputs.alias_release }}-${{ needs.buildWindows.outputs.github_sha_short }}-Win64-Installer.sha256
          tag: ${{ needs.buildWindows.outputs.alias_release }}
          overwrite: true

  # ==========================================================================
  # Create Windows x86 installer
  # Based on the content of https://github.com/aliascash/installer
  createWindowsX86Installer:
    runs-on: windows-latest
    needs: buildWindowsX86
    steps:
      # Get installer repo content
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
          repository: aliascash/installer

      # Download installable content...
      - name: Download content to install
        uses: carlosperate/download-file-action@v1.0.3
        with:
          file-url: https://github.com/aliascash/alias-wallet/releases/download/${{ needs.buildWindowsX86.outputs.alias_release }}/Alias-${{ needs.buildWindowsX86.outputs.alias_release }}-${{ needs.buildWindowsX86.outputs.github_sha_short }}-Win32.zip
          file-name: Alias.zip
          location: ${{ github.workspace }}

      # ... and extract it
      - name: Extract content to install
        run: 7z x -o"${{ github.workspace }}/windows/content" "${{ github.workspace }}/Alias.zip"

      # Create installer
      - name: Create Windows installer
        run: |
          cd ${{ github.workspace }}/windows/
          iscc.exe Alias.iss

      - name: Create installer checksum file
        run: |
          powershell "(Get-FileHash ${{ github.workspace }}/windows/Output/Alias-Installer.exe).Hash > ${{ github.workspace }}/windows/Output/Alias-Installer.sha256"
          powershell "(Get-Content ${{ github.workspace }}/windows/Output/Alias-Installer.sha256) | Out-File ${{ github.workspace }}/windows/Output/Alias-Installer.sha256 -Encoding ascii"
          type ${{ github.workspace }}/windows/Output/Alias-Installer.sha256

      # Upload the installer to Github
      - name: Upload installer
        id: upload-release-asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/windows/Output/Alias-Installer.exe
          asset_name: Alias-${{ needs.buildWindowsX86.outputs.alias_release }}-${{ needs.buildWindowsX86.outputs.github_sha_short }}-Win32-Installer.exe
          tag: ${{ needs.buildWindowsX86.outputs.alias_release }}
          overwrite: true

      - name: Upload installer checksum
        id: upload-release-checksum
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/windows/Output/Alias-Installer.sha256
          asset_name: Alias-${{ needs.buildWindowsX86.outputs.alias_release }}-${{ needs.buildWindowsX86.outputs.github_sha_short }}-Win32-Installer.sha256
          tag: ${{ needs.buildWindowsX86.outputs.alias_release }}
          overwrite: true

  # ==========================================================================
  # Build Alias Docker image
  # Based on the content of https://github.com/aliascash/docker-aliaswalletd
  buildDockerImage:
    runs-on: ubuntu-latest
    needs: buildLinuxBinariesAlsoForDockerImage
    steps:
      # Get installer repo content
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
          repository: aliascash/docker-aliaswalletd

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} #use username, not email
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          tags: aliascash/docker-aliaswalletd:latest,aliascash/docker-aliaswalletd:${{ needs.buildLinuxBinariesAlsoForDockerImage.outputs.alias_release }}
          build-args: |
            DOWNLOAD_URL=https://github.com/aliascash/alias-wallet/releases/download/${{ needs.buildLinuxBinariesAlsoForDockerImage.outputs.alias_release }}/Alias-${{ needs.buildLinuxBinariesAlsoForDockerImage.outputs.alias_release }}-${{ needs.buildLinuxBinariesAlsoForDockerImage.outputs.github_sha_short }}-Ubuntu-20-04.tgz
          #arg2=value2

      - name: Image digest
        run: |
          echo ${{ steps.docker_build.outputs.digest }}
          echo ${{ steps.docker_build.outputs.digest }} > ${{ github.workspace }}/Dockerimage.sha256

      # Upload the installer to Github
      - name: Store docker image digest at Github release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/Dockerimage.sha256
          asset_name: Alias-${{ needs.buildLinuxBinariesAlsoForDockerImage.outputs.alias_release }}-${{ needs.buildLinuxBinariesAlsoForDockerImage.outputs.github_sha_short }}-Dockerimage.sha256
          tag: ${{ needs.buildLinuxBinariesAlsoForDockerImage.outputs.alias_release }}
          overwrite: true
